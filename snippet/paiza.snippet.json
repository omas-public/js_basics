{
  "exercise paiza programming": {
    "scope": "javascript,typescript",
    "prefix": "paiza",
    "body": [
      "// Global function",
			"const readLines = (file = '/dev/stdin') =>",
			"  require('fs').readFileSync(file).toString().trim().split('\\n').map(v => v.trim())",
      "",
      "/**",
      " * identity 入力値をそのまま返す",
      " * @param {any} value",
      " * @returns any",
      " * @example identity(42) -> 42",
      " */",
      "const identity = value => value",
      "",
      "/**",
      "  * split 文字列(s)をセパレータ(sep)で分割した配列を返す",
      "  * @param {string} sep",
      "  * @param {function} fun",
      "  * @paran {string} s",
      "  * @returns Array",
      "  * @example split(' ')('1 2') -> ['1', '2']",
      "  * @example split(' ', toInt)('1 2') -> [1, 2]",
      "  * @example split('\\n', toInt)('1\\n2') -> [1, 2]",
      "  */",
      "const split = (sep, fun = identity) => s => s.split(sep).map(fun)",
      "",
      "/**",
      "  * join 配列(list)を受け取りセパレータ(sep)で結合した文字列を返す",
      "  * @param {string} sep",
      "  * @param {Array<string>} list",
      "  * @returns string",
      "  * @example join(' ')(['a', 'b']) -> 'a b'",
      "  * @example join('\\n')(['a', 'b']) -> 'a\\nb'",
      "  */",
      "const join = sep => list => list.join(sep)",
      "",
      "/**",
      " * slice iterator(iter)を受け取り引数の範囲をスライスして返す",
      " * @param {iterator} iter",
      " * @param {begin} number",
      " * @param {end} number",
      " * @returns Array",
      " * @example slice([0,1,2,3,4,5])(1) => [1,2,3,4,5]",
      " * @example slice([0,1,2,3,4,5])(-1) => [5]",
      " * @example slice([0,1,2,3,4,5])(1, 4) => [1,2,3]",
      " * @example slice([0,1,2,3,4,5])(1, -1) => [1,2,3,4]",
      " */",
      "const slice = (begin, end) => iter => end === undefined",
      "  ? Array.from(iter).slice(begin)",
      "  : Array.from(iter).slice(begin, end)",
      "",
      "/**",
      "  * range 範囲内の数値の配列を返す",
      "  * @param {number} begin",
      "  * @param {number} end",
      "  * @returns Array<any>",
      "  * @example range(10) -> [0,1,2,3,4,5,6,7,8,9]",
      "  * @example range(1, 10) -> [1,2,3,4,5,6,7,8,9]",
      "  */",
      "const range = (begin, end) => {",
      "  const addN = n => m => n + m",
      "  const seq = (num, start) => Array.from(Array(num), addN(start))",
      "  const [num, start] = (end === undefined)",
      "    ? [0, begin]",
      "    : [end - begin, begin]",
      "  return seq(num, start)",
      "}",
      "/**",
      " * 複数のイテレーターの要素を組み合わせた値を返す",
      " * @param  {...any} args",
      " * @returns Array<Array>",
      " */",
      "const zip = (...args) => {",
      "  const size = Math.min(...Array.from(args, arg => arg.length))",
      "  return Array.from(Array(size), (v, i) => args.map(arg => arg[i]))",
      "}",
      "",
      "/**",
      "  * toStr 文字列に変換して返す",
      "  * @param {number} n",
      "  * @returns string",
      "  * @example toStr(3) -> '3'",
      "  */",
      "const toStr = n => n.toString()",
      "",
      "/**",
      "  * toInt 文字列を整数に変換して返す",
      "  * @param {string} s",
      "  * @returns number",
      "  * @example toInt('42') -> 42",
      "  * @example toInt('4.2') -> 4",
      "  */",
      "const toInt = s => parseInt(s, 10)",
      "",
      "/**",
      "  * toList イテレータ(iter)をfunでList変換する",
      "  * @param {function} fun",
      "  * @param {iterator} iter",
      "  * @returns Array<any>",
      "  * @example toList(toInt)(['1','2','3']) -> [1,2,3]",
      "  * @example toList(toStr)([1,2,3]) -> ['1','2','3']",
      "  * @example toList(split(' '))(['1 2', '3 4']) -> [['1','2'],['3','4']]",
      "  * @example toList(split(' ', toInt))(['1 2', '3 4']) -> [[1,2],[3,4]]",
      "  */",
      "const toList = fun => iter => Array.from(iter, fun)",
      "",
      "/**",
      "  * display 値に関数を適用して表示する",
      "  * @param {function} fun",
      "  * @param {any} value",
      "  * @returns undefined",
      "  * @example display(identity)(42) -> console.log(42)",
      "  * @example display(join(' '))([1,2]) -> console.log('1 2')",
      "  * @example display(join('\\n'))([1,2]) -> console.log('1\\n2')",
      "  */",
      "const display = fun => value => console.log(fun(value))",
      "",
      "// define your function",
      "",
      "const fun = (...args) => {",
      "  return args[0]",
      "}",
      "",
      "// declair your variable",
      "",
      "const lines = getLines()" ,
      "",
      "// write maincode with call your function",
      "",
      "const result = fun(...lines)",
      "",
      "// display function",
      "// use join('\\n') or join(' ') or identity in the first parenthesis",
      "",
      "display(identity)(result)"
    ],
    "description": "template for paiza programming"
  }
}
